sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/E7W260/", 360)
source("sensDataReader.R")
sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/E7W260/", 360)
source("sensDataReader.R")
sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
source("sensDataReader.R")
sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
source("sensDataReader.R")
sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
source("sensDataReader.R")
sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
r1$d3$sensor <- "H4W261"
r2$d3$sensor <- "C7W270"
r3$d3$sensor <- "E7W260"
r4$d3$sensor <- "H9W261"
rH4W261
rH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
source("sensorPlotMaker.R")
View(add2)
source("sensorPlotMaker.R")
r1
r1$p1
r1$p2
r1$p3
r1$d1
b1$p1
b1$p2
rH4W261
head(rH4W261)
source("sensDataReader.R")
rH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
gH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Green/H4W261/", 360)
rC7W270 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/C7W270/", 385)
source("sensDataReader.R")
source("sensDataReader.R")
rH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
source("sensDataReader.R")
rH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
source("sensDataReader.R")
rH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Red/H4W261/2016-03-30/", 360)
source("sensorPlotMaker.R")
bH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Blue/H4W261/2016-03-15/", 360)
b1 <- sensorPlotMaker(bH4W261, 360)
b2 <- sensorPlotMaker(bC7W270, 385)
b3 <- sensorPlotMaker(bE7W260, 390)
b4 <- sensorPlotMaker(bH9W261, 300)
b1 <- sensorPlotMaker(bH4W261, 360
)
source("sensDataReader.R")
bH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Blue/H4W261/2016-03-15/", 360)
b1 <- sensorPlotMaker(bH4W261, 360)
b2 <- sensorPlotMaker(bC7W270, 385)
b3 <- sensorPlotMaker(bE7W260, 390)
b4 <- sensorPlotMaker(bH9W261, 300)
b1$d3$sensor <- "H4W261"
b2$d3$sensor <- "C7W270"
b3$d3$sensor <- "E7W260"
b4$d3$sensor <- "H9W261"
b1$d3$LED <- "BLUE"
b2$d3$LED <- "BLUE"
b3$d3$LED <- "BLUE"
b4$d3$LED <- "BLUE"
b2$d3$signal <- b2$d3$signal / b1$d3$signal
b3$d3$signal <- b3$d3$signal / b1$d3$signal
b4$d3$signal <- b4$d3$signal / b1$d3$signal
ff1 <- f1$d3
ff2 <- f2$d3
ff3 <- f3$d3
ff4 <- f4$d3
ff1 <- b1$d3
ff2 <- b2$d3
ff3 <- b3$d3
ff4 <- b4$d3
mPlot2 <- plot_ly(fff, x = voltage, y = signal, color = sensor)
fff <- rbind(ff1, ff2, ff3, ff4)
plot_ly(fff, x = voltage, y = signal, color = sensor)
fff
bH4W261
source("sensDataReader.R")
bH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Blue/H4W261/2016-03-15/", 360)
source("sensDataReader.R")
bH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Blue/H4W261/2016-03-15/", 360)
source("sensDataReader.R")
bH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Blue/H4W261/2016-03-15/", 360)
source("sensDataReader.R")
bH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Blue/H4W261/2016-03-15/", 360)
source("sensDataReader.R")
bH4W261 <- sensDataReader("../../../Dropbox/ImagingLab/Irakli/SensorTesting/Data/Blue/H4W261/2016-03-15/", 360)
source("sensorPlotMaker.R")
g4
g1$pq
g1$p1
g1$d3
r1$d3
b1
head(gH4W261)
g1 <- sensorPlotMaker(gH4W261, 360)
g1
g1 <- sensorPlotMaker(gH4W261, 360)
g1
source("sensDataReader.R")
g1 <- sensorPlotMaker(gH4W261, 360)
g1
source("sensDataReader.R")
g1 <- sensorPlotMaker(gH4W261, 360)
source("sensDataReader.R")
g1 <- sensorPlotMaker(gH4W261, 360)
source("sensDataReader.R")
g1 <- sensorPlotMaker(gH4W261, 360)
g1 <- sensorPlotMaker(bH4W261, 360)
b1$p1
source("sensDataReader.R")
g1 <- sensorPlotMaker(gH4W261, 360)
g1
g1$p1
g1$p2
g1$p3
g1$p2
g1$p3
g1$d1
source("sensorPlotMaker.R")
mPlot1
mPlot2
mPlot1
mPlot2
mPlot1
b1$p4
b1$p1
b1$p2
b1$p3
b1$p4
b1$p1
b1$p2
b1$p3
r1$p3
g1$p3
r1$d3
r2$d3
b2$d3
g2$d3
g1$d3
g3$d3
g4$d3
b4$d3
b1$d3
b2$d3
b3$d3
r3$d3
r4$d3
r4$d3
source("sensorPlotMaker.R")
p
source("sensorPlotMaker.R")
source("sensorPlotMaker.R")
p
source("sensorPlotMaker.R")
gData
mPlot
plot_ly(mData, x = voltage, y = signal, color = sensor)
plot_ly(rData, x = voltage, y = signal, color = sensor)
plot_ly(gData, x = voltage, y = signal, color = sensor)
plot_ly(bData, x = voltage, y = signal, color = sensor)
r1#p3
r1#p2
r1#p1
b1#p1
b1$p1
r1$p1
r1$p2
r1$p3
r1$p4
b1$p4
b1$p3
plot_ly(bData, x = voltage, y = signal, color = sensor)
b4$p3
b3$p3
b2$p3
b4$p3
plot_ly(bData, x = voltage, y = signal, color = sensor)
b3$p3
bE7W260$d1
b3$d1
b3$d2
b3$d3
hist(bE7W260$signal)
hist(bE7W260$signal[bE7W260$signal < 150])
hist(bE7W260$signal[bE7W260$signal < 150 & bE7W260$signal])
hist(bE7W260$signal[bE7W260$signal < 150 & bE7W260$signal > 30])
rnorm()
rnorm(10)
qnorm(bE7W260$signal)
dnorm(bE7W260$signal)
pnorm(bE7W260$signal)
bE7W260$signal
hist(bE7W260$signal)
pnorm(bE7W260$signal, 0, 1000)
xseq<-seq(-4,4,.01)
xseq
cumulative<-pnorm(xseq, 0, 1)
cumulative
library(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
f <- apply(bData$signal, 2,  fitdist, "lnorm")
n <- 50
m <- 50
set.seed(1)
mu <- -0.4
sig <- 0.12
x <- matrix(data=rlnorm(n*m, mu, sig), nrow=m)
x
f <- apply(x, 2,  fitdist, "lnorm")
f
plot(f)
plot(f[1])
plot(f[[1])
f[[1]]
for(i in 1:n)
plot(f[[i]])
plot(f[[1]])
plot(f[[2]])
plot(f[[3]])
x
head(x)
moneyPlots(gData)
tData -> rbind(bData, rData, gData)
tData <- rbind(bData, rData, gData)
plot_ly(tData, x = voltagem y = signal, color = sensor)
plot_ly(tData, x = voltage, y = signal, color = sensor)
plot_ly(tData, x = voltage, y = signal, color = sensor, size = LED, mode = "markers")
plot_ly(tData, x = voltage, y = signal, color = sensor, mode = "markers")
plot_ly(tData, x = voltage, y = signal, color = sensor, size = LED, mode = "markers")
plot_ly(tData, x = voltage, y = signal, color = LED, mode = "markers")
plot_ly(tData, x = voltage, y = signal, size = LED, mode = "markers")
plot_ly(tData, x = voltage, y = signal, size = "LED"", mode = "markers")
plot_ly(tData, x = voltage, y = signal, size = "LED", mode = "markers")
plot_ly(tData, x = voltage, y = signal, size = sensor, mode = "markers")
plot_ly(tData, x = voltage, y = signal, size = LED, mode = "markers")
plot_ly(bData, x = voltage, y = signal, color = sensor, mode = "markers")
plot_ly(bData, x = voltage, y = signal, color = sensor, type = "bar")
plot_ly(bData, x = voltage, y = signal, color = sensor, type = "box")
plot_ly(bData, x = voltage, y = signal, color = sensor, type = "histogram2d")
plot_ly(bData, x = voltage, y = signal, color = sensor)
plot_ly(bData, x = voltage, y = signal, color = sensor, size = LED)
plot_ly(bData, x = voltage, y = signal, color = LED)
plot_ly(bData, x = voltage, y = signal, color = sensor)
plot_ly(tData[tData$voltage == 5], x = signal, color = sensor)
ltData <- subset(tData, tData$voltage == 5)
ltData
plot_ly()
plot_ly(ltData, x = signalCondition())
plot_ly(ltData, x = signal
)
plot_ly(ltData, x = LED, y = signal)
plot_ly(ltData, x = LED, y = signal, color = sensor)
ltData <- subset(tData, tData$voltage == 8)
plot_ly(ltData, x = LED, y = signal, color = sensor)
p <- plot_ly(ltData, x = LED, y = signal, color = sensor)
Sys.setenv("plotly_username" = "iraklic")
Sys.setenv("plotly_api_key"="70w1phq6vx")
plotly_POST(p, "finalSummary")
library(shiny)
install.packages("shiny")
srou
source("astroShiny.R")
install.packages("shiny")
source("astroShiny.R")
source("astroShiny.R")
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp (ui = ui, server = server)
source("astroShiny.R")
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp (ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output)
{
sliderInput(inputId = "id1", label = "test")
}
shinyApp (ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output)
{
sliderInput(inputId = "id1", label = "test", min = 5, max = 10)
}
shinyApp (ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output)
{
sliderInput(inputId = "id1", label = "test", min = 5, max = 10, value = 7)
}
shinyApp (ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "id1", label = "test", min = 5, max = 10, value = 7)
)
server <- function(input, output) {}
shinyApp (ui = ui, server = server)
shiny::runApp('~/R/AstroPhysics/App01')
shiny::runApp('~/R/AstroPhysics/App01')
devtools::install_github("rstudio/shinyapps")
rsconnect::setAccountInfo(name='iraklic', token='88CBE7A77071A2CAA71E8F929A486ADC', secret='<SECRET>')
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='iraklic', token='88CBE7A77071A2CAA71E8F929A486ADC', secret='<SECRET>')
shiny::runApp()
devtools::install_github("rstudio/shinyapps")
rsconnect::setAccountInfo(name='iraklic', token='88CBE7A77071A2CAA71E8F929A486ADC', secret='<SECRET>')
rsconnect::setAccountInfo(name='iraklic',
token='88CBE7A77071A2CAA71E8F929A486ADC',
secret='<SECRET>')
library(rsconnect)
devtools::install_github("rstudio/shinyapps")
shiny::runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
hist(rnorm(3))
hist(rnorm(10))
hist(rnorm(100))
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num", label = "test", min = 5, max = 10, value = 7)
)
server <- function(input, output)
{
output$hist <- renderPlot({hist(rnorm(input$num))}
)
}
shinyApp (ui = ui, server = server)
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
library("MASS", lib.loc="C:/Program Files/R/R-3.2.0/library")
detach("package:MASS", unload=TRUE)
attach("package:MASS")
shiny::runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
4*0.14+5*0.35+6*0.31+7*0.2
5.57 / 4
0.03 + 0.04
d <- c(0,1,2)
d <- d - 0.07
d
d <- d*d
d
sum(d)
p <- c(0.95, 0.03m 0.02)
p <- c(0.95, 0.03, 0.02)
d <- c(0,1,2)
d2 <- d*d
d2
k <- p*pd2
k
k <- p*d2
k
m2 <- 0.07*0.07
kk <- k - m2
kk
sum(kk)
d
d - 0.07
(d - 0.07)^2
sum((d - 0.07)^2)
p*(d - 0.07)^2
sum(p*(d - 0.07)^2)
d <- rnorm(100)
d
var(d)
d <- 2*d
var(d)
4*1.077978
1.3+0.57
1.3+0.57+0.57
420-240
180/90
0.42*3
0.42^3
0.42^3*0.52
0.42^3*0.52*4
0.1*0.025
0.1*0.025/2
exp(3)
exp(1)
pi()
sqrt(3.1415)
sqrt(2*3.1415)
1/sqrt(2*3.1415)
1/sqrt(2*3.1415) * exp(1)
1/sqrt(2*3.1415) * exp(-0.5)
p <- 0.2
p^12
p^12 + p^11*12
p^12 + p^11*12 + p^10*11*12 + p^9*10*11*12
p^12 + p^12 + p^11*12 + p^10*11*12 + p^8*9*10*11*12
1.3-0.57
10*0.025/2
1/sqrt(2*3.1415)
0.32/2
0.48^3*0.52
0.48^3*0.52*4
p^12 + p^12 + p^11*12 + p^10*11*12 + p^8*9*10*11*12
p
p^12 + p^11*12 + p^11*12 + p^10*11*12 + p^8*9*10*11*12
p^12 + p^11*12 + p^10*12 + p^9*11*12 + p^8*9*10*11*12
p^12 + p^11*12 + p^10*11*12 + p^9*10*11*12 + p^8*9*10*11*12
0.48^3*0.52*4
0.3*10/2
0.03*10/2
1/sqrt(2*3.1415)
data <- data.frame(outcome = 0:5, probs = c(0.1, 0.2, 0.3, 0.2, 0.1, 0.1))
barplot(data)
barplot(height = data[probs])
data
data[probs]
data[1]
barplot(height = data[1])
shiny::runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
T
d
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
runApp('~/R/AstroPhysics/App01')
data <- data.frame(outcome = 0:5, probs = c(0.1, 0.2, 0.3, 0.2, 0.1, 0.1))
barplot(data)
barplot(height = data[probs])
data$probs
barplot(height = data$probs)
barplot(height = data$probs, x = data$outcome)
barplot(height = data$probs, names.arg = data$outcome)
set.seed(11225)
data <- rnorm(10000)
dnorm(data)
help(dnorm)
density <- dnorm(data)
density
plot(x = data, y = density)
power(2,2)
pnorm(mean = 25, sd = 5)
pnorm(20, mean = 25, sd = 5)
pnorm(100, mean = 25, sd = 5)
puv <- add_trace(pblue, y = uv$Average, marker = list(color = "purple"))
setwd("../AstroPhysics/")
source("SensorData/spectraPlotter.R")
setwd("SensorData/")
source("SensorData/spectraPlotter.R")
source("spectraPlotter.R")
source("spectraPlotter.R")
puv
source("spectraPlotter.R")
puv
shiny::runApp()
source("spectraPlotter.R")
puv
source("spectraPlotter.R")
puv
source("spectraPlotter.R")
puv
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tags$h1()
tags$h1(... = 123)
runApp()
runApp()
